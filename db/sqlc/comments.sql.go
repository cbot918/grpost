// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: comments.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getComments = `-- name: GetComments :many
SELECT comments.texts, comments.id, comments.posted_by, comments.user_name, comments.target_post
FROM comments
INNER JOIN posts
ON posts.id = comments.target_post
`

type GetCommentsRow struct {
	Texts      string
	ID         uuid.UUID
	PostedBy   uuid.UUID
	UserName   string
	TargetPost uuid.UUID
}

func (q *Queries) GetComments(ctx context.Context) ([]GetCommentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getComments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentsRow
	for rows.Next() {
		var i GetCommentsRow
		if err := rows.Scan(
			&i.Texts,
			&i.ID,
			&i.PostedBy,
			&i.UserName,
			&i.TargetPost,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
